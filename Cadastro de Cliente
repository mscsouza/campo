from tkinter import *
from tkinter import ttk
from tkinter import tix
from tkinter import messagebox
from sqlite3 import Error
from random import *
from tkinter.constants import *
from tkinter import colorchooser
import Banco
import pycep_correios
import sqlite3
import os
import tkinter as tk
import tkinter.ttk as ttk
from PIL import Image, ImageTk
import base64
from reportlab.pdfgen import canvas
from reportlab.lib.pagesizes import A4
from datetime import datetime
import sys
import time
from time import sleep
import cadastus
import math

valores=[]
val =[int(x) for x in valores]
nomes = []

def login():
    vuser = users.get()
    vsenha = senhas.get()
    cadastus.cursor.execute("""
    SELECT * FROM users 
    WHERE (Usuario=?  and Senha=?)
    """, (vuser, vsenha))
    verificarlogin = cadastus.cursor.fetchone()
    try:
        def upda():
            label_messa.config(fg='#000080')

        label_messa = tk.Label(aba1, text='Você esta Logado', background='#66CDAA', fg='#66CDAA', font='bold 12',
                               width=30)
        label_messa.place(x=145, y=0)
        label_messa.update_idletasks()

        if (vuser in verificarlogin and vsenha in verificarlogin):
            label_mess.config(text='Acesso Liberado  ', background='lightblue', fg='black', font='bold 15', width=40)
            label_mess.update_idletasks()
            sleep(2)

            janela.deiconify()
            root.destroy()
            botcadastro = tk.Button(janela, text='Você esta Logado', command=janela.after(1000, upda))

    except:

        label_mess.config(text='Senha ou Usuario esta Errado  ', background='lightblue', fg='black', font='bold 15',
                          width=40)
        label_mess.update_idletasks()
        sleep(2)
        label_mess.config(text='')

    return





def sair():
    if messagebox.askyesno('Voce quer mesmo sair ?'):
        root.destroy()
        janela.destroy()
        sys.exit()


def update():
    label_messag.config(fg="red")


janela = tk.Tk()
root = tk.Tk()
root.title('Login')
root.geometry('500x300')
root.configure(background='lightblue')
root.resizable(True, True)

img = PhotoImage(file='C:\\Users\\Marcos\\Pictures\\Brazil_cob_logo.png')
janela.iconphoto(False, img)

userslabel = tk.Label(root, text='Usuario', background='lightblue', font='bold 15')
userslabel.place(x=12, y=117)
users = tk.Entry(root, text='User')
users.place(x=90, y=121)
senhaslabel = tk.Label(root, text='Senha', background='lightblue', font='bold 15')
senhaslabel.place(x=14, y=140)
senhas = tk.Entry(root, text='Senha', show='*')
senhas.place(x=90, y=143)
# bot = Button(root, text='Você esta Logado', command=root.after(3000,update))
# bot.place(x=240, y=120)

bot_entrar = ttk.Button(root, text='Entrar', command=login, width=15)
bot_entrar.place(x=50, y=240)
bot_sair = ttk.Button(root, text='Sair', command=sair, width=15)
bot_sair.place(x=180, y=240)

label_titulo = tk.Label(root, text='Tela de Login', background='lightblue', font='bold 20')
label_titulo.place(x=160, y=5)

label_certo = Label(root, text='    ', bg='green', fg='red', font='bold 15', width=40)
label_certo.place(x=40, y=50)
label_mess = Label(root, text='    ', bg='lightblue', fg='black', font='bold 15', width=40)
label_mess.place(x=40, y=90)
label_messag = tk.Label(root, text='Para Acessar coloque sua Identificação Abaixo \n ou Faça seu  Cadastro ',
                        background='lightblue', fg='lightblue', font='bold 15', width=40)
label_messag.place(x=40, y=40)

bot = tk.Button(root, text='Você esta Logado', command=root.after(1000, update))


def register():
    label_certo.place(x=40)
    label_mess.place(x=5000)
    label_titulo.place(x=5000)
    bot_entrar.place(x=5000)
    bot_cadastrar.place(x=5000)
    label_messag.place(x=5000)
    root.configure(background='green')
    userslabel = Label(root, text='Usuario', background='green', font='bold 15')
    userslabel.place(x=12, y=117)
    senhaslabel = Label(root, text='Senha', background='green', font='bold 15')
    senhaslabel.place(x=14, y=140)
    label_titul = Label(root, text='Cadastro de Novo Usuario', background='green', font='bold 20')
    label_titul.place(x=90, y=10)
    nomelabel = Label(root, text='Nome', font='bold 15', background='green')
    nomelabel.place(x=20, y=70)
    nomeentry = Entry(root, text='Nome', width=60)
    nomeentry.place(x=90, y=77)
    emaillabel = Label(root, text='Email', background='green', font='bold 15')
    emaillabel.place(x=18, y=95)
    emailentry = Entry(root, text='Email', width=60)
    emailentry.place(x=91, y=99)

    def cadastraruser():
        if users.get() == "" or senhas.get() == "" or nomeentry.get() == "" or senhas.get() == "":
            label_certo.config(text='Preecha todos os Campos', bg='green', fg='#000080')
            label_certo.update_idletasks()
            sleep(2)
            label_certo.config(text='')

            return
        try:
            vnome = (nomeentry.get())
            vemail = (emailentry.get())
            vusers = (users.get())
            vsenhas = (senhas.get())
            cadastus.cursor.execute('''
            INSERT INTO users (Nome,Email,Usuario,Senha)VALUES(?,?,?,?)
            ''', (vnome, vemail, vusers, vsenhas))
            cadastus.conn.commit()
        except:
            messagebox.showinfo(title='ERRO', message='Não deu para Cadastrar Usuario')
            return
        nomeentry.delete(0, END)
        emailentry.delete(0, END)
        users.delete(0, END)
        senhas.delete(0, END)
        nomeentry.focus
        label_certo.config(text='Usuario Cadastrado com Sucesso', bg='green', fg='#000080')
        label_certo.update_idletasks()
        sleep(2)
        label_certo.config(text='')

    def back():
        label_certo.place(x=5000)
        bot_registrar.place(x=5000)
        root.configure(background='lightblue')
        bot_voltar.place(x=5000)
        label_titul.place(x=5000)
        userslabel.place(x=5000)
        senhaslabel.place(x=5000)
        label_messag.place(x=30)
        label_titulo.place(x=160)
        nomelabel.place(x=5000)
        nomeentry.place(x=5000)
        emailentry.place(x=5000)
        emaillabel.place(x=5000)
        bot_entrar.place(x=50)

        label_mess.place(x=40)
        bot_cadastrar.place(x=290)

    bot_voltar = ttk.Button(root, text='Voltar', command=back)
    bot_voltar.place(x=310, y=240)

    bot_registrar = ttk.Button(root, text='Registrar', command=cadastraruser)
    bot_registrar.place(x=100, y=240)


bot_cadastrar = ttk.Button(root, text='Cadastrar', command=register, width=15)
bot_cadastrar.place(x=290, y=240)

janela.title('Cadastro')
janela.geometry('800x600')
janela.configure(background='#66CDAA')
janela.resizable(True, True)


abas = ttk.Notebook(janela)
aba1 = Frame(abas)
aba2 = Frame(abas)
aba3 = Frame(abas)
aba1.configure(background='#66CDAA')
# aba2.configure(background=' ')
abas.add(aba1, text='Cadastro')
abas.add(aba2, text='Loterias')
abas.add(aba3, text='Teste')
abas.place(relx=0, rely=0, relwidth=1.00, relheight=1.00)

# colocando uma imagema

images = PhotoImage(
    data='')
label400 = Label(aba2, image=images)
label400.place(relx=0.21, rely=0.01, relwidth=0.60, relheight=0.35)

pastaApp = "C:\\Users\\Marcos\\Documents\\projetos PYTHON"


def gerar_pdf():
    try:
        y = 0

        cnv = canvas.Canvas(pastaApp + "\\TestedePDF.pdf", pagesize=A4)
        cnv.setFillColor("red")
        cnv.setFont("Times-Bold", 20)
        cnv.drawString(250, 820, "Relatorios:")
        cnv.setFont("Times-Bold", 20)
        cnv.setFillColor("blue")
        cnv.drawString(28, 805, "Nome")
        cnv.drawString(155, 805, "Endereço")
        cnv.drawString(327, 805, "Cidade")
        cnv.drawString(390, 805, "Bairro")
        cnv.drawString(466, 805, "Cep")
        cnv.drawString(510, 805, "Telefone")
        cnv.drawString(580, 805, "Obs")
        cnv.setFillColor("black")
        for pdf in nomes:
            y = y + 15
            cnv.drawString(10, 807 - y, pdf)
        cnv.save()
    except:
        messagebox.showinfo(title="ERRO", message='Erro ao criar o Arquivo em PDF')
        return
    label_pdf.config(text='PDF Criado com Sucesso  ', background='#66CDAA', fg='black', font='bold 15', width=40)
    label_pdf.update_idletasks()
    sleep(2)

    # messagebox.showinfo(title="PDF", message="PDF Criado com Sucesso")


label_pdf = Label(aba1, text='    ', bg='#66CDAA', fg='black', font='bold 15', width=40)
label_pdf.place(x=400, y=255)


##################################################################################
def popula():  ##este comando faz preecher o PDF
    tv.delete(*tv.get_children())
    vquery = "select Nome,Endereço,Cidade,Uf,Bairro,Valor,Cep,Telefone FROM Cadastro ORDER BY Nome ASC; "
    linha = Banco.dql(vquery)
    for nome in linha:
        nomes.append(tv.insert("", "end", nome))


tv = ttk.Treeview()
popula()


####################################################################################
def popular():
    tv.delete(*tv.get_children())
    vquery = "select Codigo,Nome,Endereço,Cidade,Uf,Bairro,Valor,Cep,Telefone,Obs FROM Cadastro ORDER BY Nome ASC; "
    linha = Banco.dql(vquery)
    for i in linha:
        tv.insert("", "end", values=i)


style = ttk.Style()

style.theme_use("default")

style.configure("Treeview",
                background="lightblue",
                foreground="black",
                rowheight=25,
                fieldbackground="#D3D3D3")

style.map('Treeview', background=[('selected', "#347083")])


def excluir():
    if messagebox.askyesno('Você quer mesmo Excluir'):
        try:
            vCodigo = -1
            itemSelecionado = tv.selection()[0]
            valores = tv.item(itemSelecionado, "values")
            vCodigo = valores[0]
            vquery = "DELETE FROM Cadastro where Codigo=" + vCodigo
            Banco.dml(vquery)
            tv.delete(itemSelecionado)
            messagebox.showinfo('Excluido com Sucesso')

            tb_Codigo.delete(0, END)
            tb_Nome.delete(0, END)
            tb_Endereco.delete(0, END)
            tb_Cidade.delete(0, END)
            tb_Uf.delete(0, END)
            tb_Bairro.delete(0, END)
            tb_Valor.delete(0, END)
            tb_Cep.delete(0, END)
            tb_Telefone.delete(0, END)
            tb_Obs.delete(1.0, END)


        except:
            messagebox.showinfo(title=Error, message='Selecione algum item para EXCLUIR')


def fechar():
    if messagebox.askyesno('Voce quer sair mesmo'):
        janela.destroy()


def pesquizar():
    tv.delete(*tv.get_children())
    vquery = "SELECT * FROM Cadastro WHERE nome LIKE '%" + tb_Pesquizar.get() + "%' order by Codigo"
    linhas = Banco.dql(vquery)

    for i in linhas:
        tv.insert("", "end", values=i)


def alterar():
    if tb_Codigo.get() == "":
        label_alterar.config(text='Selicione um Cliente a ser Alterado  ', fg='black', font='bold 15', width=40)
        label_alterar.update_idletasks()
        sleep(2)
        label_alterar.config(text='')
        #messagebox.showinfo(title="ERRO", message="Selecione o Campo a ser Alterado")
    else:
        vquery = "UPDATE Cadastro SET Nome='" + tb_Nome.get() + "',Endereço='" + tb_Endereco.get() + "',Cidade='" + tb_Cidade.get() + "',Uf='" + tb_Uf.get() + "',Bairro='" + tb_Bairro.get() + "',Valor='" + tb_Valor.get() + "',Cep='" + tb_Cep.get() + "',Telefone='" + tb_Telefone.get() + "',Obs='" + tb_Obs.get(
            "1.0", END) + "' WHERE Codigo='" + tb_Codigo.get() + "';"
        Banco.dml(vquery)
        popular()
        tb_Codigo.delete(0, END)
        tb_Nome.delete(0, END)
        tb_Endereco.delete(0, END)
        tb_Cidade.delete(0, END)
        tb_Uf.delete(0, END)
        tb_Bairro.delete(0, END)
        tb_Valor.delete(0, END)
        tb_Cep.delete(0, END)
        tb_Telefone.delete(0, END)
        tb_Obs.delete("1.0", END)
        label_alterar.config(text='Usuario Alterado com Sucesso  ', fg='black', font='bold 15', width=40)
        label_alterar.update_idletasks()
        sleep(2)
        label_alterar.config(text='')

        # messagebox.showinfo('Cadastro Alterado com Sucesso')
        tb_Nome.focus


# validador de numeros
def validate_entry2(text):
    if text == "": return True
    try:
        value = int(text)
    except ValueError:
        return False
    return 0 <= value <= 100000000000


vcnd2 = (janela.register(validate_entry2), "%P")


def salvar():
    if tb_Nome.get() == "" or tb_Endereco.get() == "" or tb_Cidade.get() == "" or tb_Bairro.get() == "" or tb_Valor.get() == "" or tb_Cep.get() == "" or tb_Telefone.get() == "":
        label_salvar.config(text='Prencha Todos os Campos', background='#66CDAA', fg='black', font='bold 15',
                            width=40)
        label_salvar.update_idletasks()
        sleep(2)
        label_salvar.config(text='')
        #messagebox.showinfo(title="ERRO", message="Digite todos os Campos")
        return
    try:

        vnome = (tb_Nome.get())
        vendereco = (tb_Endereco.get())
        vcidade = (tb_Cidade.get())
        vuf = (tb_Uf.get())
        vbairro = (tb_Bairro.get())
        vvalor = (tb_Valor.get())
        vcep = tb_Cep.get()
        vtelefone = tb_Telefone.get()
        vobs = (tb_Obs.get("1.0", END))

        vquery = "INSERT INTO Cadastro(Nome,Endereço,Cidade,Uf,Bairro,Valor,Cep,Telefone,Obs )VALUES('" + vnome + "','" + vendereco + "','" + vcidade + "','" + vuf + "','" + vbairro + "','" + vvalor + "','" + vcep + "',' " + vtelefone + " ','" + vobs + "') "
        Banco.dml(vquery)

    except:
        messagebox.showinfo(title='ERRO', message='Erro ao Inserir')
        return
    popular()

    tb_Nome.delete(0, END)
    tb_Endereco.delete(0, END)
    tb_Cidade.delete(0, END)
    tb_Uf.delete(0, END)
    tb_Bairro.delete(0, END)
    tb_Valor.delete(0, END)
    tb_Cep.delete(0, END)
    tb_Telefone.delete(0, END)
    tb_Obs.delete("1.0", END)
    tb_Nome.focus
    label_salvar.config(text='Cliente Salvo com Sucesso  ', background='#66CDAA', fg='black', font='bold 15', width=40)
    label_salvar.update_idletasks()
    sleep(2)
    label_salvar.config(text='')
    # messagebox.showinfo(title='OK', message='cliente salvo com sucesso')


def Limpar():
    tb_Codigo.delete(0, END)
    tb_Nome.delete(0, END)
    tb_Endereco.delete(0, END)
    tb_Cidade.delete(0, END)
    tb_Uf.delete(0, END)
    tb_Bairro.delete(0, END)
    tb_Valor.delete(0, END)
    tb_Cep.delete(0, END)
    tb_Telefone.delete(0, END)
    tb_Obs.delete(1.0, END)
    tb_Nome.focus


def CepCorreios():
    try:
        tb_Endereco.delete(0, END)
        tb_Cidade.delete(0, END)
        tb_Uf.delete(0, END)
        tb_Bairro.delete(0, END)
        zipcode = tb_Cep.get()
        dadosCep = pycep_correios.get_address_from_cep(zipcode)
        print(dadosCep)
        tb_Endereco.insert(END, dadosCep['logradouro'])
        tb_Cidade.insert(END, dadosCep['cidade'])
        tb_Bairro.insert(END, dadosCep['bairro'])
        tb_Uf.insert(END, dadosCep['uf'])
    except:
        labelcep.config(text='ERRO AO DIGITAR O CEP,O Cep informado Não Existe \n ou Esta Errado Digite um Cep Valido',
                        background='#66CDAA', fg='black', font='bold 13', width=50)
        labelcep.update_idletasks()
        sleep(2)
        labelcep.config(text='')
        # messagebox.showinfo('ERRO AO DIGITAR O CEP','O Cep informado Não Existe \n ou esta Errado Digite um Cep Valido ')


def OnDuploClick(event):
    tv.selection()
    for n in tv.selection():
        col1, col2, col3, col4, col5, col6, col7, col8, col9, col10 = tv.item(n, "values")

        tb_Codigo.delete(0, END)
        tb_Nome.delete(0, END)
        tb_Endereco.delete(0, END)
        tb_Cidade.delete(0, END)
        tb_Uf.delete(0, END)
        tb_Bairro.delete(0, END)
        tb_Valor.delete(0, END)
        tb_Cep.delete(0, END)
        tb_Telefone.delete(0, END)
        tb_Obs.delete(1.0, END)

        tb_Codigo.insert(END, col1)
        tb_Nome.insert(END, col2)
        tb_Endereco.insert(END, col3)
        tb_Cidade.insert(END, col4)
        tb_Uf.insert(END, col5)
        tb_Bairro.insert(END, col6)
        tb_Valor.insert(END, col7)
        tb_Cep.insert(END, col8)
        tb_Telefone.insert(END, col9)
        tb_Obs.insert(END, col10)


# Frame da Tela
# frame1=Frame(aba1,background='#66CDAA')
# frame1.place(relx=0.01,rely=0.01,relwidth=0.99, relheight=0.50)
# frame2=Frame(janela ,background='#7FFFD4')
# frame2.place(relx=0.1,rely=0.01,relwidth=0.99, relheight=0.99)


def relogio():
    tempo = datetime.today()

    hora = tempo.strftime("%H:%M:%S")
    dia_semana = tempo.strftime("%A")
    dia = tempo.day
    mes = tempo.strftime("%B")
    ano = tempo.strftime("%Y")

    if dia_semana == "Monday":
        dia_semana = "Segunda Feira"
    if dia_semana == "Tuesday":
        dia_semana = "Terça Feira"
    if dia_semana == "Wednesday":
        dia_semana = "Quarta Feira"
    if dia_semana == "Thursday":
        dia_semana = "Quinta Feira"
    if dia_semana == "Friday":
        dia_semana = "Sexta Feira"
    if dia_semana == "Saturday":
        dia_semana = "Sabado"
    if dia_semana == "Sunday":
        dia_semana = "Domingo"

    if mes == "January":
        mes = "Janeiro"
    if mes == "February":
        mes = "Fevereiro"
    if mes == "March":
        mes = "Março"
    if mes == "April":
        mes = "Abril"
    if mes == "May":
        mes = "Maio"
    if mes == "June":
        mes = " Junho"
    if mes == " July":
        mes = " Julho"
    if mes == "August":
        mes = "Agosto"
    if mes == "September":
        mes = "Setembro"
    if mes == "October":
        mes = "Outubro"
    if mes == "November":
        mes = "Novembro"
    if mes == "December":
        mes = "Dezembro"

    l1.config(text=hora)
    l1.after(200, relogio)
    l1.config(text=dia_semana + "  " + str(dia) + " de " + str(mes) + " de " + str(ano) + "  " + str(hora))


# Labels do Relogio
l1 = Label(aba1, font='Arial 10', text="relogio", background='Black', foreground='white')
l1.place(relx=0.61, rely=0.02, relwidth=0.38)

# Labels do Frame1
label_salvar = Label(aba1, text=' ', background='#66CDAA', fg='black', font='bold 15', width=40)
label_salvar.place(relx=0.05, rely=0.44)
label_alterar = Label(aba1, text=' ', background='#66CDAA', fg='black', font='bold 15', width=40)
label_alterar.place(relx=0.08, rely=0.40)
label = Label(aba1, text="CODIGO", background='#66CDAA')
label.place(relx=0.01, rely=0.01)
label = Label(aba1, text='NOME:', background='#66CDAA')
label.place(relx=0.01, rely=0.12)
label = Label(aba1, text='ENDEREÇO:', background='#66CDAA')
label.place(relx=0.01, rely=0.16)
label = Label(aba1, text='CIDADE:', background='#66CDAA')
label.place(relx=0.01, rely=0.20)
label = Label(aba1, text='BAIRRO:', background='#66CDAA')
label.place(relx=0.01, rely=0.24)
label = Label(aba1, text='Valor:', background='#66CDAA')
label.place(relx=0.01, rely=0.28)
label = Label(aba1, text='CEP:', background='#66CDAA')
label.place(relx=0.01, rely=0.32)
labelcep = Label(text='')
labelcep.place(relx=0, rely=0.43)
label = Label(aba1, text='TELEFONE:', background='#66CDAA')
label.place(relx=0.01, rely=0.36)
label = Label(aba1, text='OBS:', background='#66CDAA')
label.place(relx=0.63, rely=0.10)
label = Label(aba1, text='PESQUIZAR:', background='#66CDAA')
label.place(relx=0.01, rely=0.51)
label = Label(aba1, text='UF:', background='#66CDAA')
label.place(relx=0.41, rely=0.20)
# Fazendo Entry

tb_Codigo = Entry(aba1, text='Codigo', validate="key", validatecommand=vcnd2)
tb_Codigo.place(relx=0.01, rely=0.05, relwidth=0.06)
tb_Nome = Entry(aba1, text='Nome', fg='red')
tb_Nome.place(relx=0.10, rely=0.12, relwidth=0.50)
tb_Endereco = Entry(aba1, text='Endereco')
tb_Endereco.place(relx=0.10, rely=0.16, relwidth=0.50)
tb_Cidade = Entry(aba1, text='Cidade')
tb_Cidade.place(relx=0.10, rely=0.20, relwidth=0.30)
tb_Bairro = Entry(aba1, text='Bairro')
tb_Bairro.place(relx=0.10, rely=0.24, relwidth=0.30)
tb_Valor = Entry(aba1, text='Valor')
tb_Valor.place(relx=0.10, rely=0.28, relwidth=0.30)
tb_Cep = Entry(aba1, text='Cep', validate="key", validatecommand=vcnd2)
tb_Cep.place(relx=0.10, rely=0.32, relwidth=0.20)
tb_Telefone = Entry(aba1, text='Telefone', validate="key", validatecommand=vcnd2)
tb_Telefone.place(relx=0.10, rely=0.36, relwidth=0.30)
tb_Obs = Text(aba1)
tb_Obs.place(relx=0.63, rely=0.13, relwidth=0.35, relheight=0.30)
tb_Pesquizar = Entry(aba1, text='Pesquizar')
tb_Pesquizar.place(relx=0.10, rely=0.51, relwidth=0.30)
tb_Uf = Entry(aba1, text='UF:')
tb_Uf.place(relx=0.44, rely=0.20, width=24)
# Botões
bt_limpar = ttk.Button(aba1, text='LIMPAR', command=Limpar)
bt_limpar.place(relx=0.16, rely=0.04)
# balao_limpar=tix.Balloon(aba1)
# balao_limpar.bind_widget(bt_limpar,balloonmsg='Limpa os Campos')

bt_salvar = ttk.Button(aba1, text='SALVAR', command=salvar)
bt_salvar.place(relx=0.25, rely=0.04)
# balao_salvar=tix.Balloon(aba1)
# balao_salvar.bind_widget(bt_salvar,balloonmsg='Salva os Registros no Banco de Dados')

bt_editar = ttk.Button(aba1, text='EDITAR', command=alterar)
bt_editar.place(relx=0.34, rely=0.04)
# balao_edita=tix.Balloon(aba1)
# balao_edita.bind_widget(bt_editar,balloonmsg='Edita o Registro Selecionado')

bt_excluir = ttk.Button(aba1, text='EXCLUIR', command=excluir)
bt_excluir.place(relx=0.43, rely=0.04)
# balao_excluir=tix.Balloon(aba1)
# balao_excluir.bind_widget(bt_excluir,balloonmsg='Exclui os Registros do Banco de Dados')

bt_fechar = ttk.Button(aba1, text='FECHAR', cursor='hand2', command=fechar)
bt_fechar.place(relx=0.52, rely=0.04)
# balao_fecha=tix.Balloon(aba1)
# balao_fecha.bind_widget(bt_fechar,balloonmsg='Fecha o Cadastro de Cliente')

bt_pdf = ttk.Button(aba1, text='GERAR PDF', width=15, command=gerar_pdf)
bt_pdf.place(relx=0.65, rely=0.50)
bt_pesquizar = ttk.Button(aba1, text='PESQUIZAR', command=pesquizar)
bt_pesquizar.place(relx=0.41, rely=0.50)
bt_mostrar = ttk.Button(aba1, text='MOSTRAR TUDO', command=popular)
bt_mostrar.place(relx=0.51, rely=0.50)

bt_cep = Button(aba1, text='Cep', width=8, height=0, command=CepCorreios)
bt_cep.place(relx=0.31, rely=0.315)

# balao_cep=tix.Balloon(aba1)
# balao_cep.bind_widget(bt_cep,balloonmsg='Adiciona Automatico o Endereço a Cidade e o Bairro')


# treevil
tv = ttk.Treeview(aba1, height=3,
                  column=('col1', 'col2', 'col3', 'col4', 'col5', 'col6', 'col7', 'col8', 'col9', ' col10 '),
                  show='headings')
# tv.heading("#0", text="")
tv.heading("#1", text="Codigo")
tv.heading("#2", text="Nome")
tv.heading("#3", text="Endereço")
tv.heading("#4", text="Cidade")
tv.heading("#5", text="UF")
tv.heading("#6", text="Bairro")
tv.heading("#7", text="Valor")
tv.heading("#8", text="Cep")
tv.heading("#9", text="Telefone")
tv.heading("#10", text="Obs")
# tv.column("#0", width=0)
tv.column("#1", width=20)
tv.column("#2", width=100)
tv.column("#3", width=100)
tv.column("#4", width=50)
tv.column("#5", width=50)
tv.column("#6", width=30)
tv.column("#7", width=40)
tv.column("#8", width=40)
tv.column("#9", width=50)
tv.column("#10", width=10)
tv.place(relx=0.00, rely=0.60, relwidth=0.96, relheight=0.40)

tv.tag_configure("even ", background="Blue")
tv.tag_configure("odd", background="white")
popular()

# Frame da Soma

# bt=Button(janela,text='Total',command=tot,background='yellow',foreground='red' )
# bt.place(x=10,y=288,relwidth=0.08)


tv.bind("<ButtonRelease-1>", OnDuploClick)
yscrollbar = ttk.Scrollbar(aba1, orient='vertical', command=tv.yview)
# tv.configure(yscroll=scrooltv)
yscrollbar.place(relx=0.96, rely=0.60, relwidth=0.04, relheight=0.40)
tv.configure(yscrollcommand=yscrollbar.set)




def sortear():
    sorteios = []
    contador = 1
    while contador <= 6:
        numero = randint(1, 60)
        if not numero in sorteios:
            sorteios = sorteios + [numero]
            contador = contador + 1
            sorteios.sort()

    label['text'] = (sorteios[0])
    label1['text'] = (sorteios[1])
    label2['text'] = (sorteios[2])
    label3['text'] = (sorteios[3])
    label4['text'] = (sorteios[4])
    label5['text'] = (sorteios[5])

    label_mega.config(text='Mega Sena Gerado  ', fg='black', font='bold 15', width=40)
    label_mega.update_idletasks()
    sleep(2)
    label_mega.config(text='')


def sorte():
    sorteios = []
    contador = 1
    while contador <= 15:
        numero = randint(1, 25)
        if not numero in sorteios:
            sorteios = sorteios + [numero]
            contador = contador + 1
            sorteios.sort()

    label6['text'] = (sorteios[0])
    label7['text'] = (sorteios[1])
    label8['text'] = (sorteios[2])
    label9['text'] = (sorteios[3])
    label10['text'] = (sorteios[4])
    label11['text'] = (sorteios[5])
    label12['text'] = (sorteios[6])
    label13['text'] = (sorteios[7])
    label14['text'] = (sorteios[8])
    label15['text'] = (sorteios[9])
    label16['text'] = (sorteios[10])
    label17['text'] = (sorteios[11])
    label18['text'] = (sorteios[12])
    label19['text'] = (sorteios[13])
    label20['text'] = (sorteios[14])
    label_facil.config(text='Loto Facil Gerado  ', fg='black', font='bold 15', width=40)
    label_facil.update_idletasks()
    sleep(2)
    label_facil.config(text='')


label_facil = Label(aba2, text='')
label_facil.place(x=200, y=360)

label_mega = Label(aba2, text='')
label_mega.place(x=200, y=240)

bt = Button(aba2, width=15, text='MEGA SENNA', command=sortear, background='orange2',
            font='30')
bt.place(x=130, y=280)

bt = Button(aba2, width=15, text='LOTO FACIL', command=sorte, background='orange4', font='30')
bt.place(x=130, y=318)
bt = Button(aba2, width=15, background='green', text='SAIR', font=30)
bt.place(x=130, y=370)

label100 = Label(aba2, text=('=' * 56))
label100.place(x=280, y=265)
label100 = Label(aba2, text=('=' * 56))
label100.place(x=280, y=303)
label100 = Label(aba2, text=('=' * 56))
label100.place(x=280, y=340)

label = Label(aba2, text='', font=100, foreground='#00008B')
label.place(x=285, y=284)
label1 = Label(aba2, text='', font=100, foreground='#00008B')
label1.place(x=315, y=284)
label2 = Label(aba2, text='', font=100, foreground='#00008B')
label2.place(x=345, y=284)
label3 = Label(aba2, text='', font=100, foreground='#00008B')
label3.place(x=390, y=284)
label4 = Label(aba2, text='', font=100, foreground='#00008B')
label4.place(x=430, y=284)
label5 = Label(aba2, text='', font=100, foreground='#00008B')
label5.place(x=470, y=284)

label6 = Label(aba2, text='', font=100, foreground='#00008B')
label6.place(x=285, y=322)
label7 = Label(aba2, text='', font=100, foreground='#00008B')
label7.place(x=315, y=322)
label8 = Label(aba2, text='', font=100, foreground='#00008B')
label8.place(x=345, y=322)
label9 = Label(aba2, text='', font=100, foreground='#00008B')
label9.place(x=375, y=322)
label10 = Label(aba2, text='', font=100, foreground='#00008B')
label10.place(x=405, y=322)
label11 = Label(aba2, text='', font=100, foreground='#00008B')
label11.place(x=435, y=322)
label12 = Label(aba2, text='', font=100, foreground='#00008B')
label12.place(x=465, y=322)
label13 = Label(aba2, text='', font=100, foreground='#00008B')
label13.place(x=495, y=322)
label14 = Label(aba2, text='', font=100, foreground='#00008B')
label14.place(x=525, y=322)
label15 = Label(aba2, text='', font=100, foreground='#00008B')
label15.place(x=555, y=322)
label16 = Label(aba2, text='', font=100, foreground='#00008B')
label16.place(x=585, y=322)
label17 = Label(aba2, text='', font=100, foreground='#00008B')
label17.place(x=615, y=322)
label18 = Label(aba2, text='', font=100, foreground='#00008B')
label18.place(x=645, y=322)
label19 = Label(aba2, text='', font=100, foreground='#00008B')
label19.place(x=675, y=322)
label20 = Label(aba2, text='', font=100, foreground='#00008B')
label20.place(x=705, y=322)
relogio()

def popu():

    vquery = "select Valor FROM Cadastro ; "
    linha = Banco.dql(vquery)
    for total in linha:
          valores.append("", "end", values=total)


def somar():

    #somas=0
    #for v in valores:
        #somas=v
        #somas=somas+1
    label_soma["text"]=sum(val)
    #return somas

label_soma=Label(aba1,text='',bg='yellow',width=10)
label_soma.place(relx=0.87,rely=0.50)
but_soma=Button(aba1,text='Somar',command=somar)
but_soma.place(relx=0.80,rely=0.50)



janela.withdraw()
janela.mainloop()
